name: client
on:
  workflow_dispatch:
    inputs:
      testRepo:
        description: 'Testing repository'
        required: false
      solutionRepo:
        description: 'Solution repository'
        required: false
      webhookUrl:
        description: 'Webhook Url'
        required: false



jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x]
    name: ${{ github.event.inputs.solutionRepo }}
    steps:
    - uses: actions/checkout@v2
    - name: Run challenge (Node.js ${{ matrix.node-version }})
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Clone tests repo
      uses: actions/checkout@v2
      with:
        repository: ${{ github.event.inputs.testRepo }}
        path: ./challenge
    - name: Install dependencies
      run: npm ci
      working-directory: ./challenge
    - name: Clone app repo
      uses: actions/checkout@v2
      with:
        repository: ${{ github.event.inputs.solutionRepo }}
        path: ./_cloned-app
    - name: Install solution dependencies
      run: npm ci
      working-directory: ./_cloned-app/
    - name: Init solution
      run: npm run init
      working-directory: ./_cloned-app/
      continue-on-error: true
    - name: Run solution web server
      run: npm start & npx wait-on http://localhost:3000
      working-directory: ./_cloned-app/
    - name: Run test on cloned app
      run: npm run test
      working-directory: ./challenge
    - name: onSuccess
      uses: fjogeleit/http-request-action@master
      with:
        method: 'PATCH'
        url: ${{ github.event.inputs.webhookUrl }}
        data:  '{ "success":true }'
    - name: onFailure
      if: ${{ failure() || cancelled() }}
      uses: fjogeleit/http-request-action@master
      with:
        method: 'PATCH'
        url: ${{ github.event.inputs.webhookUrl }}
        data:  '{ "success":false }'

        

